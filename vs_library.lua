-------------------------------------------------------------------------
--------------------- Copyright (c) samisalreadytaken -------------------
--- v0.1.3 --------------------------------------------------------------
local VER="v0.1.3"if not _VS then _VS={}elseif _VS[VER]then return _VS[VER]end local VS={}_VS[VER]=VS MAX_COORD_FLOAT=16384.0 MAX_TRACE_LENGTH=56755.84086241697115430736 DEG2RAD=0.01745329251994329576 RAD2DEG=57.29577951308232087679 PI=3.14159265358979323846 RAND_MAX=0x7FFF local Msg,Warning=Msg,Warning local append,select,type,f,floor=table.insert,select,type,string.format,math.floor local unpack,pack=unpack,function(...)return{n=select("#",...),...}end if not table.pack then table.pack=pack end if not table.unpack then table.unpack=unpack end local x=function(m)local g=debug.getinfo(2,"Sl")Warning(m)Warning(f("\t%s:%d\n",g.short_src,g.currentline))return false end if SERVER_DLL then do local Q={}local iQ=0 local bS=false function VS.OnPlayerSpawn(...)local h=Entities:GetLocalPlayer()if bS or h and type(h)=="table"and IsValidEntity(h)and not h:IsNull()and h:GetClassname()=="player"then return Warning("VS::OnPlayerSpawn: player is already spawned\n")end local v=pack(...)local f=v[1]local g=debug.getinfo(f,"S")if v.n==0 or type(f)~="function"then return x("VS::OnPlayerSpawn: invalid parameter 1 ["..g.short_src.."]\n")end for i=1,#Q do if Q[Q[i]].source==g.source then return x("VS::OnPlayerSpawn: found event from this file in the queue, aborting ["..g.short_src.."]\n")end end local m="VS::OnPlayerSpawn: closure added to queue"local ec,em,p if v.n>1 then local t=type(v[2])if t=="string"then em=v[2]elseif t=="function"then ec=v[2]elseif t~="nil"then return x("VS::OnPlayerSpawn: parameter 2 has an invalid type '"..t.."' ; expected 'string|function'\n")end if v.n>2 then p={}for i=3,v.n do append(p,v[i])end m=m.." with "..tostring(#p).." parameter(s)"end end append(Q,f)Q[f]={success=false,params=p,err_cb=ec,err_msg=em,source=g.source,src=g.short_src,line=g.linedefined}Msg(m.." ["..g.short_src.."]\n")return true end local function RQ()local l=#Q for i=1,l do local f=Q[i]local t=Q[f]if not t.success then local p,r=t.params if p then r=f(unpack(p))else r=f()end if r or r==nil then t.success=true iQ=iQ+1 end end end if iQ==l then return true else return false end end local function LC()local b=IsInToolsMode()local s=GetMapName()if s=="a1_intro_world"then local h=Entities:FindByName(nil,"command_change_level")if h then h:Kill()end local e=Entities:FindByName(nil,"relay_stun_player")if e then e:GetOrCreatePrivateScriptScope().OnTriggerLevelChange=function()e:SetContextThink("VS_LevelChange",function()if b then SendToConsole("addon_tools_map a1_intro_world_2")else SendToConsole("addon_play a1_intro_world_2")end end,1.5)end e:RedirectOutput("OnTrigger","OnTriggerLevelChange",e)end end end local function DX()x=nil Q=nil RQ=nil iQ=nil LC=nil DX=nil end if not _VS.__eventspawn and not Entities:GetLocalPlayer()then _VS.__eventspawn=ListenToGameEvent("player_connect_full",function()bS=true if _VS.__dummy then _VS.__dummy:Kill()_VS.__dummy=nil end _VS.__dummy=Entities:CreateByClassname("soundent")LC()if not RQ()then local ic=0 _VS.__dummy:SetContextThink("",function()ic=ic+1 if RQ()or ic>10 then if ic>10 then Warning(f("VS::PostPlayerSpawn: timeout, failed to execute %d function(s)\n",#Q-iQ))for i=1,#Q do local t=Q[Q[i]]if not t.success then if t.err_msg then Warning(t.err_msg.."\n")elseif t.err_cb then t.err_cb()else Warning(f("\t%s:%d\n",t.src,t.line))end end end end DX()ic=nil _VS.__dummy:SetContextThink("R",function()StopListeningToGameEvent(_VS.__eventspawn)_VS.__eventspawn=nil _VS.__dummy:Kill()_VS.__dummy=nil end,0.0)return end return 1.0 end,1.0)Msg("VS::PostPlayerSpawn: running ("..tostring(_VS.__dummy:entindex())..")\n")else DX()_VS.__dummy:SetContextThink("R",function()StopListeningToGameEvent(_VS.__eventspawn)_VS.__eventspawn=nil _VS.__dummy:Kill()_VS.__dummy=nil end,0.0)end end,nil)end end end function VS.IsAddonEnabled(s)for v in Convars:GetStr("default_enabled_addons_list"):gmatch("[^,]+")do if v==s then return true end end return false end function VS.IsInteger(f)return floor(f)==f end function VS.IsLookingAt(s,t,d,c)return(t-s):Normalized():Dot(d)>=c end function VS.PointOnLineNearestPoint(s,e,p)local a=e-s local l=a:Length()local d=a:Dot(p-s)/(l*l)if d<0.0 then return s elseif d>1.0 then return e else return s+a*d end end function VS.Approach(t,v,f)local d=t-v if d>f then v=v+f elseif d<-f then v=v-f else v=t end return v end function VS.ApproachAngle(t,v,f)t=t % 360.0 if t>180.0 then t=t-360.0 elseif t<-180.0 then t=t+360.0 end v=v % 360.0 if v>180.0 then v=v-360.0 elseif v<-180.0 then v=v+360.0 end local d=t-v d=d % 360.0 if d>180.0 then d=d-360.0 elseif d<-180.0 then d=d+360.0 end if f<0 then f=-f end if d>f then v=v+f elseif d<-f then v=v-f else v=t end return v end function VS.AngleDiff(d,s)local a=d-s a=a % 360.0 if a>180.0 then a=a-360.0 elseif a<-180.0 then a=a+360.0 end return a end function VS.AngleNormalize(a)a=a % 360.0 if a>180.0 then a=a-360.0 elseif a<-180.0 then a=a+360.0 end return a end function VS.QAngleNormalize(a)a.x=a.x % 360.0 a.y=a.y % 360.0 a.z=a.z % 360.0 if a.x>180.0 then a.x=a.x-360.0 elseif a.x<-180.0 then a.x=a.x+360.0 end if a.y>180.0 then a.y=a.y-360.0 elseif a.y<-180.0 then a.y=a.y+360.0 end if a.z>180.0 then a.z=a.z-360.0 elseif a.z<-180.0 then a.z=a.z+360.0 end end function VS.SnapDirectionToAxis(d,e)local j=1.0-e local x if d.x<0 then x=-d.x else x=d.x end if x>j then if d.x<0.0 then d.x=-1.0 else d.x=1.0 end d.y=0.0 d.z=0.0 return d end local y if d.y<0 then y=-d.y else y=d.y end if y>j then if d.y<0.0 then d.y=-1.0 else d.y=1.0 end d.z=0.0 d.x=0.0 return d end local z if d.z<0 then z=-d.z else z=d.z end if z>j then if d.z<0.0 then d.z=-1.0 else d.z=1.0 end d.x=0.0 d.y=0.0 return d end end function VS.VectorsAreEqual(a,b,c)if not c then c=0 end local x=a.x-b.x if x<0 then x=-x end local y=a.y-b.y if y<0 then y=-y end local z=a.z-b.z if z<0 then z=-z end return(x<=c and y<=c and z<=c)end function VS.IsPointInBox(v,i,x)return(v.x>=i.x and v.x<=x.x and v.y>=i.y and v.y<=x.y and v.z>=i.z and v.z<=x.z)end function VS.IsBoxIntersectingBox(a,b,c,d)if(a.x>d.x)or(b.x<c.x)then return false elseif(a.y>d.y)or(b.y<c.y)then return false elseif(a.z>d.z)or(b.z<c.z)then return false else return true end end if package.loaded["utils.utilsinit"]then function Deg2Rad(f)return f*0.01745329251994329576 end function Rad2Deg(f)return f*57.29577951308232087679 end function VectorDistanceSq(a,b)local l=(a-b):Length()return l*l end function VectorDistance(a,b)return(a-b):Length()end function VectorLerp(t,a,b)local c=(b-a)*t return a+c end end return VS
