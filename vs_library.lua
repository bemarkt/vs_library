-------------------------------------------------------------------------
--------------------- Copyright (c) samisalreadytaken -------------------
--- v0.1.2 --------------------------------------------------------------
local VER="v0.1.2"if not _VS then _VS={}elseif _VS[VER]then return _VS[VER]end local VS={}_VS[VER]=VS VS.MAX_COORD_FLOAT=16384.0 VS.MAX_TRACE_LENGTH=56755.84086241697115430736 VS.DEG2RAD=0.01745329251994329576 VS.RAD2DEG=57.29577951308232087679 VS.PI=3.14159265358979323846 VS.RAND_MAX=0x7FFF local Msg,Warning=Msg,Warning local append,select,type,f,floor=table.insert,select,type,string.format,math.floor local unpack,pack=unpack,function(...)return{n=select("#",...),...}end if not table.pack then table.pack=pack end if not table.unpack then table.unpack=unpack end local throw=function(_m)local di=debug.getinfo(2,"Sl")Warning(_m)Warning(f("\t%s:%d\n",di.short_src,di.currentline))return false end if IsServer()then do local Q={}local iQ=0 local pS=false function VS.OnPlayerSpawn(...)local p=Entities:GetLocalPlayer()if pS or p and type(p)=="table"and type(p.__self)=="userdata"and not p:IsNull()and p:GetClassname()=="player"then return Warning("VS::OnPlayerSpawn: player is already spawned\n")end local va=pack(...)local ff=va[1]if va.n==0 or type(ff)~="function"then return throw("VS::OnPlayerSpawn: invalid parameter 1\n")end local di=debug.getinfo(ff,"S")for i=1,#Q do if Q[Q[i]].source==di.source then return throw("VS::OnPlayerSpawn: found event from this file in the queue, aborting\n")end end local _m="VS::OnPlayerSpawn: closure added to queue"local err_cb,err_msg,pp if va.n>1 then local tt=type(va[2])if tt=="string"then err_msg=va[2]elseif tt=="function"then err_cb=va[2]elseif tt~="nil"then return throw("VS::OnPlayerSpawn: parameter 2 has an invalid type '"..tt.."' ; expected 'string|function'\n")end if va.n>2 then pp={}for i=3,va.n do append(pp,va[i])end _m=_m.." with "..tostring(#pp).." parameter(s)"end end append(Q,ff)Q[ff]={success=false,pp=pp,err_cb=err_cb,err_msg=err_msg,source=di.source,src=di.short_src,line=di.linedefined}Msg(_m.."\n")return true end local function RQ()local l=#Q for i=1,l do local f=Q[i]local t=Q[f]if not t.success then local p,r=t.pp if p then r=f(unpack(p))else r=f()end if r or r==nil then t.success=true iQ=iQ+1 end end end if iQ==l then return true else return false end end local function FLC()local bT=IsInToolsMode()local _m=GetMapName()if _m=="a1_intro_world"then local h=Entities:FindByName(nil,"command_change_level")if h then h:Kill()end local e=Entities:FindByName(nil,"relay_stun_player")if e then e:GetOrCreatePrivateScriptScope().OnTriggerLevelChange=function()e:SetContextThink("VS_LevelChange",function()if bT then SendToConsole("addon_tools_map a1_intro_world_2")else SendToConsole("addon_play a1_intro_world_2")end end,1.5)end e:RedirectOutput("OnTrigger","OnTriggerLevelChange",e)end end end local function _D()throw=nil Q=nil RQ=nil iQ=nil FLC=nil _D=nil end if not _VS.__eventspawn and not Entities:GetLocalPlayer()then _VS.__eventspawn=ListenToGameEvent("player_connect_full",function()pS=true if _VS.__thinkdummy then _VS.__thinkdummy:Kill()_VS.__thinkdummy=nil end FLC()if not RQ()then local ic=0 _VS.__thinkdummy=Entities:CreateByClassname("soundent")_VS.__thinkdummy:SetContextThink("",function()ic=ic+1 if RQ()or ic>10 then if ic>10 then Warning(f("VS::PostPlayerSpawn: timeout, failed to execute %d function(s)\n",#Q-iQ))for i=1,#Q do local t=Q[Q[i]]if not t.success then if t.err_msg then Warning(t.err_msg.."\n")elseif t.err_cb then t.err_cb()else Warning(f("\t%s:%d\n",t.src,t.line))end end end end _D()ic=nil _VS.__thinkdummy:Kill()_VS.__thinkdummy=nil StopListeningToGameEvent(_VS.__eventspawn)_VS.__eventspawn=nil return end return 1.0 end,1.0)Msg("VS::PostPlayerSpawn: running ("..tostring(_VS.__thinkdummy:entindex())..")\n")else _D()StopListeningToGameEvent(_VS.__eventspawn)_VS.__eventspawn=nil end end,nil)end end end function VS.IsAddonEnabled(s)for a in Convars:GetStr("default_enabled_addons_list"):gmatch("[^,]+")do if a==s then return true end end return false end function VS.IsInteger(f)return floor(f)==f end function VS.IsLookingAt(s,t,v,f)return(t-s):Normalized():Dot(v)>=f end function VS.PointOnLineNearestPoint(a,b,c)local j=b-a local z=j:Length()local d=j:Dot(c-a)/(z*z)if d<0.0 then return a elseif d>1.0 then return b else return a+j*d end end function VS.Approach(t,v,s)local d=t-v if d>s then v=v+s elseif d<-s then v=v-s else v=t end return v end function VS.ApproachAngle(t,v,s)t=t%360.0 if t>180.0 then t=t-360.0 elseif t<-180.0 then t=t+360.0 end v=v%360.0 if v>180.0 then v=v-360.0 elseif v<-180.0 then v=v+360.0 end local d=t-v d=d%360.0 if d>180.0 then d=d-360.0 elseif d<-180.0 then d=d+360.0 end if s<0 then s=-s end if d>s then v=v+s elseif d<-s then v=v-s else v=t end return v end function VS.AngleDiff(d,s)local a=d-s a=a%360.0 if a>180.0 then a=a-360.0 elseif a<-180.0 then a=a+360.0 end return a end function VS.AngleNormalize(a)a=a%360.0 if a>180.0 then a=a-360.0 elseif a<-180.0 then a=a+360.0 end return a end function VS.QAngleNormalize(a)a.x=a.x%360.0 a.y=a.y%360.0 a.z=a.z%360.0 if a.x>180.0 then a.x=a.x-360.0 elseif a.x<-180.0 then a.x=a.x+360.0 end if a.y>180.0 then a.y=a.y-360.0 elseif a.y<-180.0 then a.y=a.y+360.0 end if a.z>180.0 then a.z=a.z-360.0 elseif a.z<-180.0 then a.z=a.z+360.0 end end function VS.SnapDirectionToAxis(v,e)local p=1.0-e local x if v.x<0 then x=-v.x else x=v.x end if x>p then if v.x<0.0 then v.x=-1.0 else v.x=1.0 end v.y=0.0 v.z=0.0 return v end local y if v.y<0 then y=-v.y else y=v.y end if y>p then if v.y<0.0 then v.y=-1.0 else v.y=1.0 end v.z=0.0 v.x=0.0 return v end local z if v.z<0 then z=-v.z else z=v.z end if z>p then if v.z<0.0 then v.z=-1.0 else v.z=1.0 end v.x=0.0 v.y=0.0 return v end end function VS.VectorsAreEqual(a,b,t)if not t then t=0 end local x=a.x-b.x if x<0 then x=-x end local y=a.y-b.y if y<0 then y=-y end local z=a.z-b.z if z<0 then z=-z end return(x<=t and y<=t and z<=t)end function VS.IsPointInBox(v,i,x)return(v.x>=i.x and v.x<=x.x and v.y>=i.y and v.y<=x.y and v.z>=i.z and v.z<=x.z)end function VS.IsBoxIntersectingBox(a,b,c,d)if(a.x>d.x)or(b.x<c.x)then return false elseif(a.y>d.y)or(b.y<c.y)then return false elseif(a.z>d.z)or(b.z<c.z)then return false else return true end end if package.loaded["utils.utilsinit"]then function Deg2Rad(v)return v*0.01745329251994329576 end function Rad2Deg(v)return v*57.29577951308232087679 end function VectorDistanceSq(a,b)local l=(a-b):Length()return l*l end function VectorDistance(a,b)return(a-b):Length()end function VectorLerp(t,a,b)local c=(b-a)*t return a+c end end return VS
